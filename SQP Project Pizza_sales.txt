create database pizza_sales;
use pizza_sales;
create table orders(
order_id int primary key,
date text,
time text
);
select * from orders;
select * from order_details;
select * from pizzas;
select * from pizza_types;

create view pizza_details as 
select p.pizza_id,p.pizza_type_id,pt.name,pt.category,p.size,p.price,pt.ingredients
from pizzas p
join pizza_types pt
on pt.pizza_type_id = p.pizza_type_id

select * from pizza_details;

alter table orders
modify date date;

alter table orders
modify time time;

-- total revenue
select round(sum(od.quantity * p.price),2) as total_revenue
from order_details od
join pizza_details p
on od.pizza_id = p.pizza_id;

-- total number of pizzas sold
select sum(od.quantity) as pizza_sold

SELECT Count(DISTINCT(order_id)) as total_orders

-- AVERAGE ORDER VALUES
select round(sum(od.quantity * p.price),2) / Count(DISTINCT(od.order_id)) as avg_order_value
from order_details od
join pizza_details p
on od.pizza_id = p.pizza_id;

-- avearge numner of pizza per order
select round(sum(od.quantity) / count(distinct(od.order_id)),0) as avg_no_pizza_per_order
from order_details od;

-- total revenue no of orders per category

select p.category, sum(od.quantity * p.price) as total_revenue, count(distinct(od.order_id)) as total_orders
from order_details od
join pizza_details p
on od.pizza_id = p.pizza_id
group by p.category;

-- total revenue and number od orders per size
select p.size, sum(od.quantity * p.price) as total_revenue, count(distinct(od.order_id)) as total_orders
from order_details od
join pizza_details p
on od.pizza_id = p.pizza_id
group by p.size;

-- hourly, daily, monthly, trend in order and revenue of pizza
select
      case
      when hour(o.time) between 9 and 12 then 'late Morning'
      when hour(o.time) between 12 and 15 then 'Lunch'
      when hour(o.time) between 15 and 18 then 'Mid Afternoon'
      when hour(o.time) between 18 and 21 then 'Dinner'
      when hour(o.time) between 21 and 23 then 'Late Night'
      else 'other'
      end as meal_time, count(distinct(od.order_id)) as total_orders
from order_details od
join orders o on o.order_id = od.order_id
group by meal_time
order by total_orders desc;

-- weekdays
select dayname(o.date) as day_name, count(distinct(od.order_id)) as total_orders
from order_details od
join orders o
on o.order_id = od.order_id
group by dayname(o.date)
order by total_orders desc;

-- monthwise trend
select monthname(o.date) as day_name, count(distinct(od.order_id)) as total_orders
from order_details od
join orders o
on o.order_id = od.order_id
group by monthname(o.date)
order by total_orders desc;

-- the most order pizza
select p.name, p.size, count(od.order_id) as count_pizzas
from order_details od
join pizza_details p
on od.pizza_id = p.pizza_id
group by p.name, p.size
order by count_pizzas desc;

-- the most order pizza Name
select p.name, count(od.order_id) as count_pizzas
from order_details od
join pizza_details p
on od.pizza_id = p.pizza_id
group by p.name
order by count_pizzas desc;

  -- Tops 5 pizzas by revenue
select p.name, sum(od.quantity * p.price) as total_revenue
from order_details od
join pizza_details p
on od.pizza_id = p.pizza_id
group by p.name
order by total_revenue desc
limit 5;

-- Tops pizza by sales
select p.name, sum(od.quantity) as pizzas_sold
from order_details od
join pizza_details p
on od.pizza_id = p.pizza_id
group by p.name
order by pizzas_sold desc
limit 5;

-- Pizza analysis
select name, price
from pizza_details
order by price desc
limit 5;

-- Top used ingredients
create temporary table number as(
   select 1 as n union all
   select 2 union all select 3 union all select 4 union all
   select 5 union all select 6 union all select 7 union all
   select 8 union all select 9 union all select 10
);

select ingredient, count(ingredient) as ingredient_count
from(
     select substring_index(substring_index(ingredients, ',', n), ',', -1) as ingredient
     from order_details
     join pizza_details on pizza_details.pizza_id = order_details.pizza_id
     join numbers on char_length(ingredients) - char_lenght(replace(ingredients, ',', '')) >=n-1
     ) as subquery
group by ingredient
order by ingredient_count desc;
